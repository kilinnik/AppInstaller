<Window x:Class="AppInstaller.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:svg="http://sharpvectors.codeplex.com/svgc/"
        xmlns:res="clr-namespace:AppInstaller.Resources"
        xmlns:interactivity="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:winex="https://github.com/yariker/WindowExtras.Wpf"
        xmlns:converters="clr-namespace:AppInstaller.Converters"
        WindowStyle="None" BorderThickness="0" AllowsTransparency="True"
        mc:Ignorable="d" WindowStartupLocation="CenterScreen"
        Height="540" Width="531" Background="{DynamicResource WindowBackgroundBrush}"
        MouseLeftButtonDown="Window_MouseDown" d:DataContext="{d:DesignInstance }">
    <interactivity:Interaction.Triggers>
        <interactivity:EventTrigger EventName="Closing">
            <interactivity:InvokeCommandAction Command="{Binding CancelCommand}" />
        </interactivity:EventTrigger>
    </interactivity:Interaction.Triggers>
    <!-- Задаем фон окна с градиентом -->
    <!-- Устанавливаем кастомный шаблон для окна -->
    <winex:WindowEx.WindowShadow>
        <winex:WindowShadow CornerRadius="10" OffsetX="0" OffsetY="4" Opacity="0.25" Radius="10"
                            ShadowBrush="#FF000000" />
    </winex:WindowEx.WindowShadow>
    <Window.Template>
        <ControlTemplate TargetType="{x:Type Window}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="10">
                <ContentPresenter />
            </Border>
        </ControlTemplate>
    </Window.Template>
    <Window.Resources>
        <Style TargetType="ScrollBar">
            <Setter Property="Width" Value="6" />
            <Setter Property="Margin" Value="0,0,0,0" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ScrollBar">
                        <Grid>
                            <Track Name="PART_Track" IsDirectionReversed="True">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Background="{DynamicResource ScrollBackBrush}"
                                                  Width="6" BorderThickness="0" Focusable="False" />
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Background="{DynamicResource ScrollBrush}" Width="6" />
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Width="6" Background="{DynamicResource ScrollBackBrush}"
                                                  BorderThickness="0" Focusable="False" />
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Стиль для RepeatButton без эффекта фокуса и наведения -->
        <Style TargetType="RepeatButton">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Background" Value="{DynamicResource ScrollBackBrush}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="RepeatButton">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- Оставляем фон без изменений при наведении -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ScrollBackBrush}" />
                            </Trigger>
                            <!-- Оставляем фон без изменений при фокусе -->
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ScrollBackBrush}" />
                            </Trigger>
                            <!-- Оставляем фон без изменений при нажатии -->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource ScrollBackBrush}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <converters:ViewIndexToIconKindConverter x:Key="ViewIndexToIconKindConverter" />
        <!-- Добавляем ресурс для конвертера из bool в Visibility -->
        <converters:BooleanToHiddenVisibilityConverter x:Key="BoolToHiddenVisibilityConverter" />
        <Style TargetType="{x:Type RadioButton}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Ellipse Fill="{DynamicResource CheckBoxBrush}" Width="12" Height="12" />
                            <materialDesign:PackIcon Kind="Check" Width="12" Height="12"
                                                     Foreground="{DynamicResource TextBrush}"
                                                     Visibility="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, 
                                         Converter={StaticResource BoolToHiddenVisibilityConverter}}" />
                            <ContentPresenter Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,0,0" />
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <!-- Основной контейнер Grid для компоновки элементов интерфейса -->
    <Grid>
        <Border x:Name="Overlay" Background="#4C000000" Visibility="Collapsed" Panel.ZIndex="1">
            <!-- Используем Clip, чтобы тень не выходила за закругленные края -->
            <Border.Clip>
                <RectangleGeometry Rect="0,0,531,540" RadiusX="10" RadiusY="10" />
            </Border.Clip>
            <Grid Background="#4C000000">
                <!-- Полупрозрачный черный слой внутри границ с закругленными краями -->
            </Grid>
        </Border>

        <!-- Содержимое основного окна -->
        <Grid Panel.ZIndex="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="30" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <Border Grid.Row="0" Background="{DynamicResource ButtonBackgroundBrush}" CornerRadius="10, 10, 0, 0"
                    Margin="0,0,0,0" Padding="0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>

                    <!-- Текст заголовка -->
                    <TextBlock Grid.Column="0" Foreground="{DynamicResource TextBrush}" FontSize="14" Margin="15,0,0,0"
                               Text="R.G NITOKIN Installer" VerticalAlignment="Center" FontWeight="Regular"
                               FontFamily="/Resources/#Inter" />

                    <!-- Кнопки для закрытия окна и сворачивания -->
                    <StackPanel Grid.Column="1" FlowDirection="RightToLeft" Orientation="Horizontal">
                        <Button Width="42" Height="34"
                                BorderThickness="0" Padding="0,-1,0,3" Margin="-0.2,-0.2,0,-2"
                                Command="{Binding CancelCommand}">
                            <Button.Style>
                                <Style TargetType="Button" BasedOn="{StaticResource ButtonExitStyle}">
                                    <!-- Устанавливаем начальный фон для кнопки -->
                                    <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />

                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <!-- Меняем фон и цвет текста при наведении -->
                                            <Setter Property="Background" Value="{DynamicResource ExitBrush}" />
                                            <Setter Property="Foreground" Value="{DynamicResource ExitTextBrush}" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <materialDesign:PackIcon Kind="Close" Width="20" Height="20" HorizontalAlignment="Center"
                                                     VerticalAlignment="Center" Margin="0,0,0,3" 
                                                     Foreground="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}"/>
                        </Button>
                        <Button Width="42" Height="33" Background="Transparent"
                                Foreground="{DynamicResource TextBrush}"
                                BorderThickness="0" Padding="0" Margin="0,0,0,0"
                                Click="MinimizeButton_Click">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="border" Background="{TemplateBinding Background}"
                                            BorderThickness="0">
                                        <materialDesign:PackIcon Kind="Minus" Width="20" Height="20" Margin="0,0,0,3"
                                                                 Padding="0"
                                                                 HorizontalAlignment="Center"
                                                                 VerticalAlignment="Center" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <!-- Триггер изменения фона при наведении -->
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="border" Property="Background"
                                                    Value="{DynamicResource ShadowBrush}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                        <Button Width="42" Height="33" Background="Transparent"
                                Foreground="{DynamicResource TextBrush}"
                                BorderThickness="0" Padding="0" Margin="0,0,0,0"
                                Click="ToggleTheme" ToolTip="{x:Static res:Strings.DarkLightTheme}">
                            <Button.Template>
                                <ControlTemplate TargetType="Button">
                                    <Border x:Name="border" Background="{TemplateBinding Background}"
                                            BorderThickness="0">
                                        <svg:SvgViewbox Source="{Binding ThemeIconSource}"
                                                        Width="{Binding ThemeIconWidth}" Margin="0,0,0,3"
                                                        Height="{Binding ThemeIconHeight}" HorizontalAlignment="Center"
                                                        VerticalAlignment="Center" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <!-- Триггер изменения фона при наведении -->
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="border" Property="Background"
                                                    Value="{DynamicResource ShadowBrush}" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Button.Template>
                        </Button>

                    </StackPanel>
                </Grid>
            </Border>
            <!-- Контейнер для отображения текущего View -->
            <Grid Grid.Row="1">
                <ContentControl Height="431" Width="532" Content="{Binding CurrentView}" />
            </Grid>
            <!-- Контейнер для кнопок FAQ, ссылки на Telegram и ссылки на программу в магазине -->
            <StackPanel Grid.Row="3">
                <WrapPanel Margin="30,21,0,33">
                    <Button Foreground="{DynamicResource TgBrush}" BorderThickness="0"
                            Command="{Binding ShowMessageBoxCommand}"
                            Height="28" Width="28" Margin="0" ToolTip="FAQ by nitokin" Padding="0"
                            Style="{StaticResource MaterialDesignRaisedDarkButton}" Background="Transparent">
                        <materialDesign:PackIcon Kind="InformationOutline" Width="28" Height="28"
                                                 Foreground="{DynamicResource IconBrush}" />
                    </Button>
                    <Button BorderThickness="0" Command="{Binding OpenTgLinkCommand}"
                            Height="24" Width="24" Margin="18,0,20,0" ToolTip="Nitokin Telegram" Padding="0"
                            Style="{StaticResource MaterialDesignRaisedDarkButton}" Background="Transparent">
                        <!-- Иконка для Telegram -->
                        <Image>
                            <Image.Source>
                                <svg:SvgImage Source="/Resources/tglogo.svg" />
                            </Image.Source>
                        </Image>
                    </Button>
                    <Button BorderThickness="0" Command="{Binding OpenAppPurchaseLinkCommand}"
                            Height="24" Width="24"
                            Margin="0" Padding="0" ToolTip="{x:Static res:Strings.AppLink}"
                            Style="{StaticResource MaterialDesignRaisedDarkButton}" Background="Transparent">
                        <Image x:Name="AppPurchaseLinkImage"
                               Width="{Binding AppPurchaseLinkImageWidth}"
                               Height="{Binding AppPurchaseLinkImageHeight}"
                               Source="{Binding AppPurchaseLinkLogo}" />
                    </Button>
                </WrapPanel>
            </StackPanel>
            <!-- Контейнер для кнопок "Начать/Вперед/Установить/Завершить", "Назад" -->
            <WrapPanel Margin="2,18,30,30" Grid.Row="3" FlowDirection="RightToLeft">
                <Button BorderThickness="0" Command="{Binding CancelCommand}"
                        Height="30" Margin="0" FontWeight="Regular" FontFamily="/Resources/#Inter"
                        Background="{DynamicResource ButtonBackgroundBrush}"
                        Width="107" Style="{StaticResource FlatButtonStyle}"
                        Visibility="{Binding IsCancelButtonVisible, Converter={StaticResource BoolToHiddenVisibilityConverter}}">
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <!-- Присваиваем имя Border, чтобы его можно было использовать в триггерах -->
                            <Border x:Name="border" Background="{TemplateBinding Background}" CornerRadius="10"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center"
                                            VerticalAlignment="Bottom">
                                    <materialDesign:PackIcon Kind="Close" Width="20" Height="20"
                                                             VerticalAlignment="Center" Padding="0"
                                                             Margin="0,4,0,4" Foreground="{DynamicResource TextBrush}" />
                                    <TextBlock Margin="0" Text="{x:Static res:Strings.Cancel}" FontWeight="Regular"
                                               FontSize="14"
                                               Foreground="{DynamicResource TextBrush}" VerticalAlignment="Center"
                                               HorizontalAlignment="Center" Padding="6,4,0,5" />
                                </StackPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <!-- Триггер на наведение мыши -->
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource ExitBrush}"
                                            TargetName="border" />
                                    <Setter Property="Foreground" Value="{DynamicResource ExitTextBrush}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <Button BorderThickness="0" Command="{Binding NavigateToNextViewCommand}"
                        Height="30" Margin="0" FontWeight="Regular" FontFamily="/Resources/#Inter"
                        Background="{DynamicResource ButtonBackgroundBrush}"
                        Style="{DynamicResource FlatButtonStyle}" Width="Auto"
                        Visibility="{Binding IsNextButtonVisible, Converter={StaticResource BoolToHiddenVisibilityConverter}}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <materialDesign:PackIcon Foreground="{DynamicResource TextBrush}"
                                                 Kind="{Binding CurrentViewIndex, Converter={StaticResource ViewIndexToIconKindConverter}}"
                                                 Width="18" Height="18" VerticalAlignment="Center"
                                                 HorizontalAlignment="Center"
                                                 Margin="-2,4,8,4" Padding="0" Grid.Column="0" />
                        <TextBlock Margin="0" Text="{Binding ButtonNextText}" FontWeight="Regular" FontSize="14"
                                   Foreground="{DynamicResource TextBrush}" VerticalAlignment="Center" Width="Auto"
                                   HorizontalAlignment="Center" Padding="0,4,0,4" Grid.Column="1" />
                    </Grid>
                </Button>
                <Button BorderThickness="0" Command="{Binding NavigateToPreviousViewCommand}"
                        FontFamily="/Resources/#Inter"
                        Height="30" Width="Auto" Margin="20,0,0,0" Background="{DynamicResource ButtonBackgroundBrush}"
                        Style="{DynamicResource FlatButtonStyle}" FontWeight="Regular"
                        Visibility="{Binding IsBackButtonVisible, Converter={StaticResource BoolToHiddenVisibilityConverter}}">
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock Text="{x:Static res:Strings.Back}" Foreground="{DynamicResource TextBrush}"
                                   Margin="0,4,0,4"
                                   FontSize="14" Padding="0" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        <materialDesign:PackIcon Kind="ArrowLeft" Width="18" Height="18" VerticalAlignment="Center"
                                                 HorizontalAlignment="Center"
                                                 Margin="6,6,-2,4" Foreground="{DynamicResource TextBrush}"
                                                 Padding="0,0,0,0" />
                    </StackPanel>
                </Button>
            </WrapPanel>
        </Grid>
    </Grid>
</Window>